library(tseries)
library(vars)
fred.df=read.csv("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/fred.csv",header=T)
bitbf17.df=read.csv("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/bitbf17.csv",header=T)
fred.df
bitcoin.df=read.csv("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/bitcoin.csv",header=T)
bitcoin.df
bitbf17.df
names(fred.df)
names(bitcoin.df)
x1<-merge(fred.df,bitcoin.df,all=FALSE)
x1
head(x1)
summary(x1)
x1$DATE<-as.Date(x1$DATE)
ts.plot(x1$DATE ,gpars=list(xlab="day",ylab="bitcoin"))
ts.plot(x1$CBBTCUSD ,gpars=list(xlab="day",ylab="bitcoin"))
ggplot(x1,aes(x=DATE,CBBTCUSD)) +geom_line()
ts.plot(x1$DCOILWTICO ,gpars=list(xlab="day",ylab="DCOILWTICO"))
ggplot(x1,aes(x=DATE,DCOILWTICO)) +geom_line()
ts.plot(x1$SP500 ,gpars=list(xlab="day",ylab="SP500"))
ggplot(x1,aes(x=DATE,SP500)) +geom_line()
ts.plot(x1$Gold ,gpars=list(xlab="day",ylab="Gold"))
ggplot(x1,aes(x=DATE,Gold)) +geom_line()
ts.plot(x1$DEXUSEU ,gpars=list(xlab="day",ylab="DEXUSEU"))
ggplot(x1,aes(x=DATE,DEXUSEU)) +geom_line()
model3.5 <- lm(CBBTCUSD~DCOILWTICO+SP500+Gold+DEXUSEU, data = x1)
summary(model3.5)
coeftest(model3.5,vcov.=vcovHC)
kpss.test(x1$DATE,null="Level")
kpss.test(x1$DATE,null="Trend")
kpss.test(x1$DCOILWTICO,null="Level")
kpss.test(x1$DCOILWTICO,null="Trend")
kpss.test(x1$SP500,null="Level")
kpss.test(x1$SP500,null="Trend")
kpss.test(x1$Gold,null="Level")
kpss.test(x1$Gold,null="Trend")
kpss.test(x1$DEXUSEU,null="Level")
kpss.test(x1$DEXUSEU,null="Trend")
kpss.test(x1$CBBTCUSD,null="Level")
kpss.test(x$CBBTCUSD,null="Trend")
rep.kpss <- function(series,maxdiffs=5,crit.val=0.05) {
x <- series
diffs <- 0
for(i in 1:maxdiffs) {
pval <- kpss.test(x,null="Level")$p.value
if(pval >= crit.val)
return(c(diffs,0,pval))
pval <- kpss.test(x,null="Trend")$p.value
if(pval >= crit.val)
return(c(diffs,1,pval))
x <- diff(x)
diffs <- diffs + 1
}
return(FALSE)
}
model3.7 <- lm(diff(CBBTCUSD)~diff(SP500)+diff(Gold)+diff(DEXUSEU)+diff(DCOILWTICO), data = x1)
summary(model3.7)
coeftest(model3.7,vcov.=vcovHC)
ts.plot(bitbf17.df$CBBTCUSD ,gpars=list(xlab="day",ylab="bitcoin"))
ggplot(bitbf17.df,aes(x=DATE,CBBTCUSD)) +geom_line()
##Q 3.8-
acf(diff(bitbf17.df$CBBTCUSD))
pacf(diff(bitbf17.df$CBBTCUSD))
maxa <- 15
outp <- matrix(0L,(maxa+1)^2,3)
lwage <- bitbf17.df%>% select(CBBTCUSD) %>% log
bit_arim <- bitbf17.df%>% select(CBBTCUSD) %>% log
maxa <- 15
outp <- matrix(0L,(maxa+1)^2,3)
bit_arim <- bitbf17.df%>% select(CBBTCUSD) %>% log
model3.5 <- lm(CBBTCUSD~DCOILWTICO+SP500+Gold+DEXUSEU, data = x1)
summary(model3.5)
coeftest(model3.5,vcov.=vcovHC)
model3.4.1 <- lm(log(x1)~log( DEXUSEU), data = x1)
model3.5 <- lm(CBBTCUSD~DCOILWTICO+SP500+Gold+DEXUSEU, data = x1)
summary(model3.5)
coeftest(model3.5,vcov.=vcovHC)
auto.arima(x1$Bitcoin_Price, ic ="CBBTCUSD")
auto.arima(x1$CBBTCUSD, ic ="bitcoin")
outp <- matrix(0L,7^2,3)
row <- 1
# The i and j value are set from 0 to 6 because, from acf and pacf model
# the peak value for me is in between 0 and 6
for(i in 0:6){
for(j in 0:6){
aic <- AIC(arima(log(filtered$bitcoin),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
}
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
for(j in 0:6){
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
# The i and j value are set from 0 to 6 because, from acf and pacf model
# the peak value for me is in between 0 and 6
for(i in 0:6){
for(j in 0:6){
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
}
order(outp[,3])
# The below output will give you the p,q value for which the AIC is minimum.
# Choose that value for the rest of models.
outp[38,]
outp <- matrix(0L,7^2,3)
row <- 1
# The i and j value are set from 0 to 6 because, from acf and pacf model
# the peak value for me is in between 0 and 6
for(i in 0:6){
for(j in 0:6){
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
}
order(outp[,3])
# The below output will give you the p,q value for which the AIC is minimum.
# Choose that value for the rest of models.
outp[38,]
##Q 3.8-
acf(diff(bitbf17.df$CBBTCUSD))
pacf(diff(bitbf17.df$CBBTCUSD))
outp <- matrix(0L,7^2,3)
row <- 1
# The i and j value are set from 0 to 6 because, from acf and pacf model
# the peak value for me is in between 0 and 6
for(i in 0:6){
for(j in 0:6){
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
}
order(outp[,3])
# The below output will give you the p,q value for which the AIC is minimum.
# Choose that value for the rest of models.
outp[38,]
x1$weekday <- format(as.Date(x1$DATE), "%a")
bitbf17.df$weekday
model4<- lm(CBBTCUSD~weekday ,data=x1)
x1$res <- residuals(model4)
x1$res
periodogram(x1$res)
periodogram(diff(x1$res))
source('C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/PS3.R', echo=TRUE)
ts.plot(x1$SP500 ,gpars=list(xlab="day",ylab="SP500"))
ggplot(x1,aes(x=DATE,SP500)) +geom_line()
ts.plot(x1$Gold ,gpars=list(xlab="day",ylab="Gold"))
ggplot(x1,aes(x=DATE,Gold)) +geom_line()
ts.plot(x1$DEXUSEU ,gpars=list(xlab="day",ylab="DEXUSEU"))
ggplot(x1,aes(x=DATE,DEXUSEU)) +geom_line()
model3.5 <- lm(CBBTCUSD~DCOILWTICO+SP500+Gold+DEXUSEU, data = x1)
ts.plot(x1$CBBTCUSD ,gpars=list(xlab="day",ylab="bitcoin"))
ggplot(x1,aes(x=DATE,CBBTCUSD)) +geom_line()
ts.plot(bitbf17.df$CBBTCUSD ,gpars=list(xlab="day",ylab="bitcoin"))
ggplot(bitbf17.df,aes(x=DATE,CBBTCUSD)) +geom_line()
acf(diff(bitbf17.df$CBBTCUSD))
pacf(diff(bitbf17.df$CBBTCUSD))
outp <- matrix(0L,7^2,3)
row <- 1
# The i and j value are set from 0 to 6 because, from acf and pacf model
# the peak value for me is in between 0 and 6
for(i in 0:6){
for(j in 0:6){
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
}
order(outp[,3])
# The below output will give you the p,q value for which the AIC is minimum.
# Choose that value for the rest of models.
outp[38,]
forcst1 <- forecast(bitcoin.df$CBBTCUSD)
plot(forcst1,include=30,gpars=list(xlab="bitcoin",ylab="day"))
forcst2 <- forecast(fred.df$Gold)
plot(forcst2,include=30,gpars=list(xlab="Gold",ylab="day"))
forcst3 <- forecast(fred.df$SP500)
plot(forcst3,include=30,gpars=list(xlab="SP500",ylab="day"))
forcst4 <- forecast(fred.df$Gold)
plot(forcst4,include=0,gpars=list(xlab="Gold",ylab="day"))
acf(diff(bitbf17.df$CBBTCUSD))
pacf(diff(bitbf17.df$CBBTCUSD))
outp <- matrix(0L,7^2,3)
row <- 1
# The i and j value are set from 0 to 6 because, from acf and pacf model
# the peak value for me is in between 0 and 6
for(i in 0:6){
for(j in 0:6){
aic <- AIC(arima(log(bitbf17.df$CBBTCUSD),c(i,1,j)))
outp[row,] <- c(i,j,aic)
row <- row + 1
}
}
order(outp[,3])
# The below output will give you the p,q value for which the AIC is minimum.
# Choose that value for the rest of models.
outp[38,]
forcst1 <- forecast(bitcoin.df$CBBTCUSD)
plot(forcst1,include=30,gpars=list(xlab="bitcoin",ylab="day"))
forcst2 <- forecast(fred.df$Gold)
plot(forcst2,include=30,gpars=list(xlab="Gold",ylab="day"))
forcst3 <- forecast(fred.df$SP500)
plot(forcst3,include=30,gpars=list(xlab="SP500",ylab="day"))
forcst4 <- forecast(fred.df$Gold)
plot(forcst4,include=0,gpars=list(xlab="Gold",ylab="day"))
forcst1 <- forecast(bitcoin.df$CBBTCUSD,bitcoin.df$DATE)
forcst1 <- forecast(bitcoin.df$CBBTCUSD)
plot(forcst1,include=30,gpars=list(xlab="bitcoin",ylab="day"))
forcst3 <- forecast(fred.df$SP500)
plot(forcst3,include=30,gpars=list(xlab="SP500",ylab="day"))
forcst4 <- forecast(fred.df$Gold)
plot(forcst4,include=0,gpars=list(xlab="Gold",ylab="day"))
forcst5 <- forecast(fred.df$Gold)
plot(forcst5,include=30,gpars=list(xlab="Gold",ylab="day"))
forcst4 <- forecast(fred.df$DEXUSEU)
plot(forcst4,include=0,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst5 <- forecast(fred.df$DEXUSEU)
plot(forcst5,include=30,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst6 <- forecast(fred.df$DEXUSEU)
plot(forcst6,include=0,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst5 <- forecast(fred.df$DEXUSEU)
plot(forcst5,include=30,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst6 <- forecast(fred.df$DEXUSEU)
plot(forcst6,include=30,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst5 <- forecast(fred.df$DEXUSEU)
plot(forcst5,include=30,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst3 <- forecast(fred.df$SP500)
plot(forcst3,include=30,gpars=list(xlab="SP500",ylab="day"))
forcst6 <- forecast(fred.df$DEXUSEU)
plot(forcst6,include=30,gpars=list(xlab="DEXUSEU",ylab="day"))
forcst5 <- forecast(fred.df$DEXUSEU)
plot(forcst5,include=30,gpars=list(xlab="DEXUSEU",ylab="day"))
periodogram(x1$CBBTCUSD)
periodogram(diff(x1$CBBTCUSD))
periodogram(x1$DATE)
periodogram(diff(x1$DATE))
periodogram(x1$DCOILWTICO)
periodogram(diff(x1$DCOILWTICO))
periodogram(x1$SP500)
periodogram(diff(x1$SP500))
periodogram(x1$Gold)
periodogram(diff(x1$Gold))
periodogram(x1$DEXUSEU)
periodogram(diff(x1$DEXUSEU))
x1$weekday <- format(as.Date(x1$DATE), "%a")
bitbf17.df$weekday
model4<- lm(CBBTCUSD~weekday ,data=x1)
x1$res <- residuals(model4)
x1$res
periodogram(x1$res)
periodogram(diff(x1$res))
diff_jp <- function(x){
n <- nrow(x)
return(x[2:n,]-x[1:n-1,])
}
x <- x1 %>% dplyr::select(CBBTCUSD,DCOILWTICO,DEXUSEU,Gold,SP500) %>% log %>% diff_jp
VAR(x,p=1,type="both") %>% AIC
VAR(x,p=2,type="both") %>% AIC
VAR(x,p=3,type="both") %>% AIC
model3.14 <- VAR(x,p=2,type="both")
summary(model3.14)
x <- x1 %>% dplyr::select(SP500,DCOILWTICO,DEXUSEU,Gold,CBBTCUSD) %>% log %>% diff_jp
VAR(x,p=1,type="both") %>% AIC
VAR(x,p=2,type="both") %>% AIC
VAR(x,p=3,type="both") %>% AIC
model3.15 <- VAR(x,p=1,type="both")
variable <- VAR(x,p=1,type="both")
hh<- 30
forc <- predict(variable, n.ahead = hh, ci = 0.95, dumvar = NULL)
plot(forc)
forc[1]$fcst$CBBTCUSD
rm(list=ls())
## Import packages
library(data.table)
library(sandwich) # For White correction
library(lmtest) # More advanced hypothesis testing tools
library(DBI)
library(RSQLite)
library(tidyverse)
library(ggplot2)
library(plm)
library(TSA)
library(forecast)
library(MASS)
library(tseries)
library(broom)
library(vars)
library(psych)
library(e1071)
library(caret)
setwd("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 4/Advanced BA with R/home work")
f_stock_return <- function(stock_price, n, stock_mu, stock_sigma){
delta_t <- 1/n # one period
for (i in seq(n)){
epsilon <- runif(n=1, min=0, max=1) # random generated number
# calculate stock price (using quantile function of normal distribution)
stock_price <- stock_price * (1 + qnorm(epsilon,
stock_mu * delta_t,
stock_sigma* sqrt(delta_t)))
}
return(stock_price)
}
f_stock_return()
f_stock_return
simulations <- 10000 # number of MC simulations
n <- 20 # trading days
stock_price <- 100
stock_mu <- .1 # drift 10%
stock_sigma <- .2 # volatility 20%
# Monte Carlo simulations
set.seed(42) # for reproducibility
stock_prices <- c()
for (i in seq(simulations)){
stock_prices <- c(stock_prices,
f_stock_return(stock_price=stock_price,
n=n,
stock_mu=stock_mu,
stock_sigma=stock_sigma))
}
stock_prices
quantile(stock_prices, c(.01, .05))
library(ggplot2)
ggplot(pi_df, aes(x=x, y=y, color=as.factor(in_circle))) +
geom_point() +
theme(legend.position='none')
ggplot(pi_df, aes(x=x, y=y, color=as.factor(in_circle))) +
geom_point() +
theme(legend.position='none')
ggplot(pi_df, aes(x=x, y=y, color=as.factor(in_circle))) +
geom_point() +
theme(legend.position='none')
library(ggplot2)
ggplot(pi_df, aes(x=x, y=y, color=as.factor(in_circle))) +  geom_point() +  theme(legend.position='none')
system.time(for(i in 1:100) mad(runif(1000)))
library(combinat)
install.packages("combinat")
library(combinat)
library(datasets)
install.package("mcsm"")
library(datasets)
library(combinat)
asdad
library(datasets)
sys.time
setwd("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3")
## Import packages
library(data.table)
library(sandwich) # For White correction
library(lmtest) # More advanced hypothesis testing tools
library(DBI)
library(RSQLite)
library(tidyverse)
library(ggplot2)
library(plm)
library(TSA)
library(forecast)
library(MASS)
library(tseries)
library(broom)
library(vars)
library(psych)
library(e1071)
library(caret)
library (ggplot)
system.time(for(i in 1:100) mad(runif(1000)))
install.packages("ggplot2")
system.time(for(i in 1:100) mad(runif(1000)))
f_stock_return <- function(stock_price, n, stock_mu, stock_sigma){
delta_t <- 1/n # one period
for (i in seq(n)){
epsilon <- runif(n=1, min=0, max=1) # random generated number
# calculate stock price (using quantile function of normal distribution)
stock_price <- stock_price * (1 + qnorm(epsilon,
stock_mu * delta_t,
stock_sigma* sqrt(delta_t)))
}
return(stock_price)
}
f_stock_return
rm(list=ls())
## Import packages
library(data.table)
library(sandwich) # For White correction
library(lmtest) # More advanced hypothesis testing tools
library(DBI)
library(RSQLite)
library(tidyverse)
library(ggplot2)
library(plm)
library(TSA)
library(forecast)
library(MASS)
library(tseries)
library(broom)
library(psych)
library(vars)
library(e1071)
library(caret)
fred.df=read.csv("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/fred.csv",header=T)
bitcoin.df=read.csv("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/bitcoin.csv",header=T)
bitbf17.df=read.csv("C:/Users/Dhruv Sharma PC/Desktop/UTD subjetcs/Semester 2/BA with R/PS 3/bitbf17.csv",header=T)
fred.df
bitcoin.df
bitbf17.df
names(fred.df)
names(bitcoin.df)
x1<-merge(fred.df,bitcoin.df,all=FALSE)
x1
head(x1)
summary(x1)
x1$DATE<-as.Date(x1$DATE)
ts.plot(x1$DATE ,gpars=list(xlab="day",ylab="bitcoin"))
ts.plot(x1$CBBTCUSD ,gpars=list(xlab="day",ylab="bitcoin"))
ggplot(x1,aes(x=DATE,CBBTCUSD)) +geom_line()
ts.plot(x1$DCOILWTICO ,gpars=list(xlab="day",ylab="DCOILWTICO"))
ggplot(x1,aes(x=DATE,DCOILWTICO)) +geom_line()
ts.plot(x1$SP500 ,gpars=list(xlab="day",ylab="SP500"))
ggplot(x1,aes(x=DATE,SP500)) +geom_line()
rm(list=ls())
## Import packages
library(data.table)
library(sandwich) # For White correction
library(lmtest) # More advanced hypothesis testing tools
library(DBI)
library(RSQLite)
library(ggplot2)
library(plm)
library(TSA)
library(broom)
library(vars)
library(tidyverse)
library(forecast)
library(MASS)
library(tseries)
library(psych)
library(e1071)
library(caret)
system.time(for(i in 1:100) mad(runif(1000)))
f_stock_return <- function(stock_price, n, stock_mu, stock_sigma){
delta_t <- 1/n # one period
for (i in seq(n)){
epsilon <- runif(n=1, min=0, max=1) # random generated number
# calculate stock price (using quantile function of normal distribution)
stock_price <- stock_price * (1 + qnorm(epsilon,
stock_mu * delta_t,
stock_sigma* sqrt(delta_t)))
}
return(stock_price)
}
f_stock_return
simulations <- 10000 # number of MC simulations
n <- 20 # trading days
stock_price <- 100
stock_mu <- .1 # drift 10%
stock_sigma <- .2 # volatility 20%
# Monte Carlo simulations
set.seed(42) # for reproducibility
stock_prices <- c()
for (i in seq(simulations)){
stock_prices <- c(stock_prices,
f_stock_return(stock_price=stock_price,
n=n,
stock_mu=stock_mu,
stock_sigma=stock_sigma))
}
stock_prices
quantile(stock_prices, c(.01, .05))
library(ggplot2)
ggplot(pi_df, aes(x=x, y=y, color=as.factor(in_circle))) +  geom_point() +  theme(legend.position='none')
install.packages("MonteCarlo")
library (MonteCarlo)
a<- function(b)
b<-b+1
print(b)
a<- function(b) {
b<-b+1
print(b)
print(c)
}
a
c
b
a
b
c
a(c)
a(c)
a<- function(b) {
b<-b+1
print(b)
print(c)
}
a(c)
a(b)
b(c)
a < - function(b) {
b < - b+1
print(b)
print(c)
}
a(b)
c
q()
